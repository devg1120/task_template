package main

import (
	"context"
	"fmt"
	scp "go-scp/scp"
	"go-scp/scp/auth"
	"golang.org/x/crypto/ssh"
	"os"
	//"flag"
	//"github.com/jessevdk/go-flags"
	"regexp"
)

type Target struct {
	ip       string
	port     string
	username string
	passwd   string
}

type Operation string

const (
	RemoteToLocal Operation = "RemoteToLocal"
	LocalToRemote Operation = "LocalToRemote"
)

type Session struct {
	op  Operation
	src string
	dst string
}

func session(t Target, s Session) {
	/*
		t := Target{
			ip:       "127.0.0.1",
			port:     "22",
			username: "devg1120",
			passwd:   "sakiko1120",
		}
	*/
	/*
		s := Session{
			//op: RemoteToLocal,
			op:  LocalToRemote,
			src: "/var/tmp/test3.txt",
			dst: "/var/tmp/test4.txt",
		}
	*/

	clientConfig, _ := auth.PasswordKey(t.username, t.passwd, ssh.InsecureIgnoreHostKey())

	// Create a new SCP client
	//client := scp.NewClient("10.0.2.101:22", &clientConfig)
	client := scp.NewClient(t.ip+":"+t.port, &clientConfig)

	// Connect to the remote server
	err := client.Connect()
	if err != nil {
		fmt.Println("Couldn't establish a connection to the remote server ", err)
		return
	}

	switch s.op {
	case LocalToRemote:
		/*
				  SCP
			               local     =>  remote
		*/

		src_filename := s.src
		dst_filename := s.dst
		f, err := os.Open(src_filename)

		if err != nil {
			fmt.Println(err)
			fmt.Printf("fail to open file:%s\n", src_filename)
			os.Exit(3)

		}

		defer client.Close()

		defer f.Close()

		err = client.CopyFromFile(context.Background(), *f, dst_filename, "0666")
		//err = client.CopyFromFile(context.Background(), *f, dst_filename)

		if err != nil {
			fmt.Println("Error while copying file ", err)
		}

	case RemoteToLocal:
		/*
				  SCP
			               remote     =>  local
		*/

		src_filename := s.src
		dst_filename := s.dst
		f, err := os.Create(dst_filename)

		if err != nil {
			fmt.Println(err)
			fmt.Printf("fail to open file:%s\n", dst_filename)
			os.Exit(3)

		}

		defer client.Close()

		defer f.Close()

		//err = client.CopyFromFile(context.Background(), *f, dst_filename, "0655")
		err = client.CopyFromRemote(context.Background(), f, src_filename)

		if err != nil {
			fmt.Println("Error while copying file ", err)
		}
	}
}

/*
func main_() {
	var (
		op = flag.String("op", "", "OPRERATON REMOTE/LOCL")
		src = flag.String("s", "", "source file path")
		dst = flag.String("d", "", "source file path")
	)
flag.Parse()
fmt.Printf("-op: %s\n", *op)
fmt.Printf("-s: %s\n", *src)
fmt.Printf("-d: %s\n", *dst)

    fmt.Println(flag.NArg(), flag.NFlag())

}
*/

/*

SCP REFRENCE   https://uxmilk.jp/50946


 *LOCAL => REMOTE

   scp /path/to/local user#pass@192.168.1.30:/path/to/remote

 *REMOTE =>  LOCAL

   scp user#pass@192.168.10.1:/home/user/*.txt ~/tmp

 *REMOTE => REMOTE


 *DIRCOPY

*/

/*
type Options struct {
	Remote  bool   `short:"r" long:"operation" description:"A name" `
	Src     string `short:"s" long:"sourcs" description:"A name" required:"true"`
	Dst     string `short:"d" long:"destination" description:"A name" required:"true"`
}
*/
/*
type Options struct {
	Fst     string `short:"f" long:"sourcs" description:"A name" required:"true"`
	Snd     string `short:"s" long:"destination" description:"A name" required:"true"`
}

var options Options
*/

func check_regexp(reg, str string) bool {
	//fmt.Println(regexp.MustCompile(reg).Match([]byte(str)))
	return regexp.MustCompile(reg).Match([]byte(str))
}

func is_remote(param string) bool {

	return check_regexp(`@`, param)

}

func  make_data( direction string , src string, dst string) (Target, Session) {

	//fmt.Printf(".... %s   %s  %s\n", direction, src, dst)

	var user string
	var pass  string
	var ip    string
	var path_dst string
	var path_src  string
	var mode  Operation

	if direction == "LocalToRemote"   {
        // dst
           bs := []byte(dst)
	                           // bbb#pppp@10.1.1.1:/path
	   assined := regexp.MustCompile("(.*)%(.*)@(.*):(.*)")

           group := assined.FindSubmatch(bs)

	   if len(group) == 5 {
	       //fmt.Printf("group len:%d\n", len(group))

	       //fmt.Printf("0.... %s\n", group[0])
	       //fmt.Printf("1.... %s\n", group[1])
	       //fmt.Printf("2.... %s\n", group[2])
	       //fmt.Printf("3.... %s\n", group[3])
	       //fmt.Printf("4.... %s\n", group[4])

	       user =  string(group[1])
	       pass =  string(group[2])
	       ip   =  string(group[3])
	       path_dst = string(group[4])
	       path_src = src
	       mode = LocalToRemote

           } else {
              fmt.Printf(" dst parse error")


	   }

	} else if   direction == "RemoteToLocal" {
        // src
           bs := []byte(src)
	                           // bbb#pppp@10.1.1.1:/path
	   assined := regexp.MustCompile("(.*)%(.*)@(.*):(.*)")

           group := assined.FindSubmatch(bs)

	   if len(group) == 5 {
	       //fmt.Printf("group len:%d\n", len(group))

	       //fmt.Printf("0.... %s\n", group[0])
	       //fmt.Printf("1.... %s\n", group[1])
	       //fmt.Printf("2.... %s\n", group[2])
	       //fmt.Printf("3.... %s\n", group[3])
	       //fmt.Printf("4.... %s\n", group[4])

	       user =  string(group[1])
	       pass =  string(group[2])
	       ip   =  string(group[3])
	       path_src = string(group[4])
	       path_dst = dst
	       mode =RemoteToLocal

           } else {
              fmt.Printf(" dst parse error")


	   }


	} else {

	}

	/*
	t := Target{
		ip:       "127.0.0.1",
		port:     "22",
		username: "devg1120",
		passwd:   "sakiko1120",
	}
	s := Session{
		op: LocalToRemote,
		//op:  RemoteToLocal,
		src: "/var/tmp/test.txt",
		dst: "/var/tmp/test1.txt",
	}
*/
	

	t := Target{
		ip:       ip,
		port:     "22",
		username: user,
		passwd:   pass,
	}
	s := Session{
		op: mode,
		//op: LocalToRemote,
		//op:  RemoteToLocal,
		src: path_src,
		dst: path_dst,
	}
	
      return  t, s

}

func main() {
	/*
	           var parser = flags.NewParser(&options, flags.Default)
	   	fmt.Printf("start....\n")
	   	if _, err := parser.Parse(); err != nil {
	   		switch flagsErr := err.(type) {
	   		case flags.ErrorType:
	   			if flagsErr == flags.ErrHelp {
	   				os.Exit(0)
	   			}
	   			os.Exit(1)
	   		default:
	   			os.Exit(1)
	   		}
	   	} else {
	      	    fmt.Printf("ok....\n")
	               fmt.Printf("Fst: %v\n",    options.Fst)
	               fmt.Printf("Snd: %v\n",    options.Snd)
	           }

	          // Fst judgment
	          fst_is_remote := is_remote( options.Fst )

	          // Snd judgment
	          snd_is_remote := is_remote( options.Snd )

	          fmt.Printf("fst: %v\n", fst_is_remote)
	          fmt.Printf("snd: %v\n", snd_is_remote)

	*/

	//fmt.Printf("args count: %d\n", len(os.Args))
	//fmt.Printf("args : %#v\n", os.Args)

	//for i, v := range os.Args {
	//	fmt.Printf("args[%d] -> %s\n", i, v)
	//}

	if len(os.Args) != 3 {

		fmt.Printf("usage : %s <src> <dst> \n", os.Args[0])

		os.Exit(1)

	}

	src := os.Args[1]
	dst := os.Args[2]
	//fmt.Printf("src : %s\n", src)
	//fmt.Printf("dst : %s\n", dst)
	// Fst judgment
	src_is_remote := is_remote(src)

	// Snd judgment
	dst_is_remote := is_remote(dst)

	//fmt.Printf("src: %v\n", src_is_remote)
	//fmt.Printf("dst: %v\n", dst_is_remote)

	if (src_is_remote && dst_is_remote) ||
		(!src_is_remote && !dst_is_remote) {

		fmt.Printf("error\nusage : %s <src> <dst> \n", os.Args[0])
		os.Exit(1)

	}

/*
	t := Target{
		ip:       "127.0.0.1",
		port:     "22",
		username: "devg1120",
		passwd:   "sakiko1120",
	}
	s := Session{
		op: LocalToRemote,
		//op:  RemoteToLocal,
		src: "/var/tmp/test.txt",
		dst: "/var/tmp/test1.txt",
	}
*/

var  t Target
var  s Session

      if  src_is_remote {
	      // REMOTE TO LOCAL
              t, s = make_data("RemoteToLocal", src, dst) 
              //_, _ = make_data(src, dst)


      } else if  dst_is_remote {
	      // LOCAL TO REMOTE
              //t, s := make_data(src, dst)
              t, s = make_data("LocalToRemote", src, dst)

      } else {

		os.Exit(1)
      }

      fmt.Printf("%+v\n", t)
      fmt.Printf("%+v\n", s)

      //return
      session(t, s)
}

/*
func main() {

   _, err := flags.ParseArgs(&options, os.Args)
   fmt.Printf("start....\n")

   if err != nil {
   		switch flagsErr := err.(type) {
   		case flags.ErrorType:
   			if flagsErr == flags.ErrHelp {
   				os.Exit(0)
   			}
   			os.Exit(1)
   		default:
   			os.Exit(1)
   		}
   	os.Exit(1)
   }
   fmt.Printf("ok....\n")

   fmt.Printf("Remote: %v\n", options.Renote)
   fmt.Printf("Src: %v\n",    options.Src)
   fmt.Printf("Dst: %v\n",    options.Dst)

}
*/
